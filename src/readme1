

Я никогда не путался с ESP32 или веб-сервисами, работающими на микроконтроллерах, но я в основном пишу веб-сервисы и приложения для жизни.

Вы можете использовать JavaScript для чтения значений формы и отправки HTTP-запроса в отдельную конечную точку для сохранения значений имени пользователя и пароля, но HTML уже поддерживает формы.

Теперь у вас есть входные теги для работы с формами. Все, что вам нужно сделать, это добавить элемент формы вокруг ваших входных данных, который определяет, как кодировать и передавать значения формы, и в какую конечную точку их отправлять. Браузер позаботится обо всем остальном, когда вы нажмете кнопку отправки:

<body>
    <div class="login-box">
        <form method="post" action="/login">
            <div class = "box-head">
                <div class = "logo"><img url="logo.png"></div>
                <div class = "network-title"><h1>Network Login</h1></div>
            </div>
            <div class ="textbox">            
                <input type="text" placeholder="Network Name" name="networkName" value="">
            </div>        
            <div class="textbox">            
                <input type="password" placeholder="Password" name="networkPassword" value="">
            </div>        
            <input class="button" type="submit" value="Sign in">
            <input class="button" type="reset" value="Restart">        
        </form>
    </div>    
</body>

Это отправит HTTP-запрос POST к конечной точке /login с телом, содержащим значения формы, закодированные как application/x-www-form-urlencoded.

Вам не нужен PHP для обработки запроса (и у вас нет среды выполнения PHP для начала). PHP выполняет логику на HTTP-сервере. В этом случае ESP32 - это ваш HTTP-сервер, а ваша логика фиксируется объектом AsyncWebServer внутри вашего эскиза.

AsyncWebServerRequest может читать значения форм для вас, поэтому все, что вам нужно сделать, это реализовать правильный обработчик на вашем сервере:

server.on("/login", HTTP_POST, [](AsyncWebServerRequest *request) {
  if (!request->hasParam("networkName", true) || !request->hasParam("networkPassword", true)) {
    request->send(400, "Missing fields");
    return;
  }
  const char *networkName = request->getParam("networkName")->value().c_str();
  const char *networkPassword = request->getParam("networkPassword")->value().c_str();
  // Do stuff with networkName and networkPassword
  // ...
  // Redirect to new page
  request->redirect("/whatever");
});

